# Generated by Django 4.1.3 on 2023-02-01 23:46

from django.db import migrations, models

from api.constants import SUPPLIER_TYPE_GENERAL, SUPPLIER_TYPES


def forward_func(apps, schema_editor) -> None:
    db_alias = schema_editor.connection.alias

    SupplierType = apps.get_model("api", "SupplierType")
    Supplier = apps.get_model("api", "Supplier")

    try:
        old_to_new_supplier_type_ids = {
            SupplierType.objects.using(db_alias).get(name=type_name).id: type_id
            for type_id, type_name in SUPPLIER_TYPES
            if type_id != SUPPLIER_TYPE_GENERAL
        }

        all_suppliers = Supplier.objects.using(db_alias).all()
        for supplier in all_suppliers:
            supplier.type = old_to_new_supplier_type_ids.get(supplier.type, SUPPLIER_TYPE_GENERAL)
            supplier.save()
    except SupplierType.DoesNotExist:
        # Needs to catch for unit tests
        pass


def reverse_func(apps, schema_editor) -> None:
    db_alias = schema_editor.connection.alias
    SupplierType = apps.get_model("api", "SupplierType")

    for type_id, type_name in SUPPLIER_TYPES:
        SupplierType.objects.using(db_alias).create(id=type_id, name=type_name)


class Migration(migrations.Migration):

    dependencies = [
        ("api", "0030_buyer_geographies_buyer_industries"),
    ]

    operations = [
        migrations.AlterField(
            model_name="supplier",
            name="type",
            field=models.SmallIntegerField(),
        ),
        migrations.RunPython(forward_func, reverse_func),
        migrations.DeleteModel(
            name="SupplierType",
        ),
        migrations.AlterField(
            model_name="supplier",
            name="type",
            field=models.SmallIntegerField(choices=[(1, "General"), (2, "TMC"), (3, "Reseller")]),
        ),
    ]
