# Generated by Django 4.1.3 on 2023-01-21 00:28

from django.apps.registry import Apps
from django.db import migrations, models
from django.db.backends.base.schema import BaseDatabaseSchemaEditor


def remove_all_duplicate_restrictions(apps: Apps, schema_editor: BaseDatabaseSchemaEditor) -> None:
    db_alias = schema_editor.connection.alias
    model_names = ["CoverageGroupRestriction", "DepartmentRestriction", "GeographyRestriction"]
    for model_name in model_names:
        remove_all_duplicates_for_model(apps, db_alias, model_name)


def remove_all_duplicates_for_model(apps: Apps, db_alias: str, model_name: str) -> None:
    """
    Creates a hashmap of unique restrictions for quick lookup.
    If record exists with same values, it is deleted.
    """
    model_class = apps.get_model("api", model_name)
    all_restrictions = model_class.objects.using(db_alias).all()

    ignore_dict_keys = ['_state', 'id', 'created_at', 'updated_at']
    restriction_by_sub = {}

    for restriction in all_restrictions:
        val = "_".join(
            [str(y) for x, y in restriction.__dict__.items() if x not in ignore_dict_keys]
        )
        if restriction_by_sub.get(val):
            restriction.delete()
        restriction_by_sub[val] = True


class Migration(migrations.Migration):

    dependencies = [
        ("api", "0020_contract_previous_contract"),
    ]

    operations = [
        migrations.RunPython(remove_all_duplicate_restrictions, migrations.RunPython.noop, elidable=True),
        migrations.AddConstraint(
            model_name="coveragegrouprestriction",
            constraint=models.UniqueConstraint(
                fields=("employer_coverage_group", "subscription"),
                name="unique_coverage_group_restriction_per_subscription",
            ),
        ),
        migrations.AddConstraint(
            model_name="departmentrestriction",
            constraint=models.UniqueConstraint(
                fields=("employer_department", "subscription"), name="unique_department_restriction_per_subscription"
            ),
        ),
        migrations.AddConstraint(
            model_name="geographyrestriction",
            constraint=models.UniqueConstraint(
                fields=("employer_geography", "subscription"), name="unique_geography_restriction_per_subscription"
            ),
        ),
    ]
